
# Bloomberg Reference Request Model
class BloombergReferenceRequest(BaseModel):
    securities: List[str]
    fields: List[str]
    
    @validator('securities')
    def validate_securities(cls, v):
        if not v:
            raise ValueError("At least one security required")
        if len(v) > 100:
            raise ValueError("Maximum 100 securities per request")
        return v
    
    @validator('fields')  
    def validate_fields(cls, v):
        if not v:
            raise ValueError("At least one field required")
        if len(v) > 50:
            raise ValueError("Maximum 50 fields per request")
        return v

@app.post('/api/bloomberg/reference')
async def get_bloomberg_reference_data(request: BloombergReferenceRequest, api_key: str = Depends(validate_api_key)):
    query_id = 'reference_' + datetime.now().strftime('%Y%m%d_%H%M%S_%f')
    api_logger = comprehensive_logger.get_logger('api_requests')
    
    api_logger.info('Bloomberg reference request | Securities: {} | Fields: {} | Query ID: {}'.format(len(request.securities), len(request.fields), query_id))
    
    try:
        comprehensive_logger.log_bloomberg_request(request.securities, request.fields, query_id)
        bloomberg_data = bloomberg.get_reference_data(request.securities, request.fields)
        
        securities_data = []
        errors = {}
        
        for security, data in bloomberg_data.items():
            if isinstance(data, dict):
                securities_data.append({
                    'security': security,
                    'fields': data,
                    'success': True
                })
            else:
                errors[security] = str(data)
                securities_data.append({
                    'security': security,
                    'fields': {},
                    'success': False,
                    'error': str(data)
                })
        
        response = {
            'success': True,
            'data': {
                'query_type': 'reference_data',
                'timestamp': datetime.now().isoformat(),
                'securities_requested': len(request.securities),
                'fields_requested': len(request.fields),
                'securities_returned': len(securities_data),
                'securities_data': securities_data,
                'errors': errors if errors else None,
                'source': 'Bloomberg Terminal - REFERENCE DATA'
            },
            'error': None,
            'timestamp': datetime.now().isoformat(),
            'query_id': query_id
        }
        
        api_logger.info('Bloomberg reference response: {} securities processed | Query ID: {}'.format(len(securities_data), query_id))
        return response
        
    except Exception as e:
        api_logger.error('Bloomberg reference error: {} | Query ID: {}'.format(str(e), query_id))
        comprehensive_logger.log_bloomberg_error(e, 'reference_data', query_id)
        
        return {
            'success': False,
            'data': None,
            'error': {
                'message': str(e),
                'type': type(e).__name__,
                'query_id': query_id
            },
            'timestamp': datetime.now().isoformat(),
            'query_id': query_id
        }